# -*- coding: utf-8 -*-
"""
CSE446 hw3 p5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EtJYFeZDQPBH3zOfZk9kJQ2KNAagt9FT

Written using code from the following tutorials:
	https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html
	https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html#load-data
	https://pytorch.org/tutorials/beginner/finetuning_torchvision_models_tutorial.html
"""

# Access google drive for saving and loading trained models. 
from google.colab import drive
drive.mount('/content/drive')

import torch
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np
import torch.nn as nn
import torch.optim as optim
from tqdm import tqdm
from torch.utils.data import random_split
import time
import copy

# Use GPU if it's available, and CPU otherwise.
train_on_gpu = torch.cuda.is_available()
train_on_multi_gpus = (torch.cuda.device_count() >= 2)
gpus = torch.cuda.device_count()

# Define transforms for the data to work with the AlexNet model.
transform = transforms.Compose([transforms.Resize(256),
                                transforms.ToTensor(),
                                transforms.Normalize((0.5, 0.5, 0.5), 
                                                     (0.5, 0.5, 0.5))])

# Load the dataset.
dataset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)

# Split the dataset into training / validation such that validation is 10% of
# the training.

# Use a seed so that the training / validation split is the same each time.
torch.manual_seed(43)

# We set the validation set to be 10% of the training data.
val_size = 5000
train_size = len(dataset) - val_size

# Split the set.
trainset, valset = random_split(dataset, [train_size, val_size])

# Define the training and validation dataloaders.
trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,
                                          shuffle=True, num_workers=2)

valloader = torch.utils.data.DataLoader(valset, batch_size=4,
                                        shuffle=True, num_workers=2)

# Join train and validation into a single dataloader
dataloaders = {'train': trainloader, 'val': valloader}
dataset_sizes = {'train': train_size, 'val': val_size}

# Load and define the test dataloader.
testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=4,
                                         shuffle=False, num_workers=2)
test_size = len(testset)

# Define the dataset class names.
classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 
               'ship', 'truck')

def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
    ''' Train the model and return the trained model as well as training
        performance data. '''

    # Handle training on gpu or cpu.
    if train_on_multi_gpus:
        print(f"\nTraining on {gpus} GPUs!\n")
        model = torch.nn.DataParallel(model).cuda()
    elif train_on_gpu:
        print('\nTraining on GPU!\n')
        model = model.cuda()
    else: 
        print('\nTraining on CPU; consider making n_epochs very small.\n')

    since = time.time()

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0
    
    train_losses = []
    valid_losses = []

    for epoch in tqdm(range(num_epochs)):
        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                if train_on_multi_gpus or train_on_gpu:
                    inputs, labels = inputs.cuda(), labels.cuda()

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)
            if phase == 'train':
                scheduler.step()

            epoch_loss = running_loss / dataset_sizes[phase]
            epoch_acc = running_corrects.double() / dataset_sizes[phase]

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())

            # Store this epoch's training and validation losses.
            if phase == 'train':
                train_losses.append(loss)
            else:
                valid_losses.append(loss)

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(
        time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model, train_losses, valid_losses

def performance(model):
    ''' Return the loss and performace of the model on the test data. '''
    correct = 0
    total = 0
    running_loss = 0.0
    with torch.no_grad():
        for data in testloader:
            images, labels = data

            # Handle for gpu.
            if train_on_multi_gpus or train_on_gpu:
                images, labels = images.cuda(), labels.cuda()

            # Compute the accuracy.
            outputs = model(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

            # Compute the loss.
            loss = criterion(outputs, labels)
            running_loss += loss.item() * images.size(0)
    
    loss = running_loss / test_size
    accuracy = 100 * correct / total

    return loss, accuracy

def plot(title, x_label, y_label, x, y, file_dir, dim=(8, 5)):
    ''' Plot the given data. '''
    plt.figure(figsize=dim)
    plt.title(title)
    plt.xlabel(x_label)
    plt.xticks(np.arange(0, max(x)+2, 1))
    plt.ylabel(y_label)
    plt.plot(x, y, '-o')
    plt.show()
    plt.savefig(file_dir)

# Define the fixed feature extractor model and it's related components.
ffe_model = torchvision.models.alexnet(pretrained=True)

# Prevent all but the last layer from training.
for param in ffe_model.parameters():
    param.requires_grad = False

ffe_model.classifier[6] = nn.Linear(4096, 10)

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(ffe_model.parameters(), lr=0.001, momentum=0.9)
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)

# Train and save the ffe model. 
ffe_model, ffe_train_losses, ffe_valid_losses = train_model(ffe_model, criterion, optimizer, scheduler, 20)

PATH = '/content/drive/MyDrive/CSE446_hw3/cifar_ffe_model.pth'
torch.save(ffe_model.state_dict(), PATH)

plot(title='Fixed feature extractor training loss per epoch',
     x_label='epoch',
     y_label='loss',
     x=[x for x in range(len(ffe_train_losses))],
     y=ffe_train_losses,
     file_dir='/content/drive/MyDrive/CSE446_hw3/ffe_t.png')

plot(title='Fixed feature extractor validation loss per epoch',
     x_label='epoch',
     y_label='loss',
     x=[x for x in range(len(ffe_valid_losses))],
     y=ffe_valid_losses,
     file_dir='/content/drive/MyDrive/CSE446_hw3/ffe_v.png')

# Display the test performance of the ffe model
loss, accuracy = performance(ffe_model)
print(f'test Loss: {loss} Accuracy: {accuracy}')

# Define the fine tuning model and it's related components.
ft_model = torchvision.models.alexnet(pretrained=True)

# Train every layer. 
for param in ft_model.parameters():
    param.requires_grad = True
    
ft_model.classifier[6] = nn.Linear(4096, 10)

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(ft_model.parameters(), lr=0.001, momentum=0.9)
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)

# Train and save the ft model. 
ft_model, ft_train_losses, ft_valid_losses = train_model(ft_model, criterion, optimizer, scheduler, 20)

PATH = '/content/drive/MyDrive/CSE446_hw3/cifar_ft_model.pth'
torch.save(ffe_model.state_dict(), PATH)

plot(title='Fine-tuning training loss per epoch',
     x_label='epoch',
     y_label='loss',
     x=[x for x in range(len(ft_train_losses))],
     y=ft_train_losses,
     file_dir='/content/drive/MyDrive/CSE446_hw3/ft_t.png')

plot(title='Fine-tuning training loss per epoch',
     x_label='epoch',
     y_label='loss',
     x=[x for x in range(len(ft_valid_losses))],
     y=ft_valid_losses,
     file_dir='/content/drive/MyDrive/CSE446_hw3/ft_v.png')

# Display the test performance of the ft model
loss, accuracy = performance(ft_model)
print(f'test Loss: {loss} Accuracy: {accuracy}')
